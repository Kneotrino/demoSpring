/*
 * This file is generated by jOOQ.
*/
package com.example.demo.model.com.example.demo.tables.tables;


import com.example.demo.model.com.example.demo.tables.Classicmodels;
import com.example.demo.model.com.example.demo.tables.Keys;
import com.example.demo.model.com.example.demo.tables.tables.records.EmployeesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Employees extends TableImpl<EmployeesRecord> {

    private static final long serialVersionUID = 707588303;

    /**
     * The reference instance of <code>classicmodels.employees</code>
     */
    public static final Employees EMPLOYEES = new Employees();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeesRecord> getRecordType() {
        return EmployeesRecord.class;
    }

    /**
     * The column <code>classicmodels.employees.employeeNumber</code>.
     */
    public final TableField<EmployeesRecord, Integer> EMPLOYEENUMBER = createField("employeeNumber", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>classicmodels.employees.lastName</code>.
     */
    public final TableField<EmployeesRecord, String> LASTNAME = createField("lastName", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>classicmodels.employees.firstName</code>.
     */
    public final TableField<EmployeesRecord, String> FIRSTNAME = createField("firstName", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>classicmodels.employees.extension</code>.
     */
    public final TableField<EmployeesRecord, String> EXTENSION = createField("extension", org.jooq.impl.SQLDataType.VARCHAR.length(10).nullable(false), this, "");

    /**
     * The column <code>classicmodels.employees.email</code>.
     */
    public final TableField<EmployeesRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

    /**
     * The column <code>classicmodels.employees.officeCode</code>.
     */
    public final TableField<EmployeesRecord, String> OFFICECODE = createField("officeCode", org.jooq.impl.SQLDataType.VARCHAR.length(10).nullable(false), this, "");

    /**
     * The column <code>classicmodels.employees.reportsTo</code>.
     */
    public final TableField<EmployeesRecord, Integer> REPORTSTO = createField("reportsTo", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>classicmodels.employees.jobTitle</code>.
     */
    public final TableField<EmployeesRecord, String> JOBTITLE = createField("jobTitle", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * Create a <code>classicmodels.employees</code> table reference
     */
    public Employees() {
        this("employees", null);
    }

    /**
     * Create an aliased <code>classicmodels.employees</code> table reference
     */
    public Employees(String alias) {
        this(alias, EMPLOYEES);
    }

    private Employees(String alias, Table<EmployeesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Employees(String alias, Table<EmployeesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Classicmodels.CLASSICMODELS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EmployeesRecord> getPrimaryKey() {
        return Keys.KEY_EMPLOYEES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EmployeesRecord>> getKeys() {
        return Arrays.<UniqueKey<EmployeesRecord>>asList(Keys.KEY_EMPLOYEES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<EmployeesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EmployeesRecord, ?>>asList(Keys.EMPLOYEES_IBFK_2, Keys.EMPLOYEES_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Employees as(String alias) {
        return new Employees(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Employees rename(String name) {
        return new Employees(name, null);
    }
}

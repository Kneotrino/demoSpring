/*
 * This file is generated by jOOQ.
*/
package com.example.demo.model.com.example.demo.tables.tables;


import com.example.demo.model.com.example.demo.tables.Classicmodels;
import com.example.demo.model.com.example.demo.tables.Keys;
import com.example.demo.model.com.example.demo.tables.tables.records.OrdersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DateAsTimestampBinding;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Orders extends TableImpl<OrdersRecord> {

    private static final long serialVersionUID = 1472430705;

    /**
     * The reference instance of <code>classicmodels.orders</code>
     */
    public static final Orders ORDERS = new Orders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersRecord> getRecordType() {
        return OrdersRecord.class;
    }

    /**
     * The column <code>classicmodels.orders.orderNumber</code>.
     */
    public final TableField<OrdersRecord, Integer> ORDERNUMBER = createField("orderNumber", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>classicmodels.orders.orderDate</code>.
     */
    public final TableField<OrdersRecord, LocalDateTime> ORDERDATE = createField("orderDate", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "", new DateAsTimestampBinding());

    /**
     * The column <code>classicmodels.orders.requiredDate</code>.
     */
    public final TableField<OrdersRecord, LocalDateTime> REQUIREDDATE = createField("requiredDate", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "", new DateAsTimestampBinding());

    /**
     * The column <code>classicmodels.orders.shippedDate</code>.
     */
    public final TableField<OrdersRecord, LocalDateTime> SHIPPEDDATE = createField("shippedDate", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "", new DateAsTimestampBinding());

    /**
     * The column <code>classicmodels.orders.status</code>.
     */
    public final TableField<OrdersRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR.length(15).nullable(false), this, "");

    /**
     * The column <code>classicmodels.orders.comments</code>.
     */
    public final TableField<OrdersRecord, String> COMMENTS = createField("comments", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>classicmodels.orders.customerNumber</code>.
     */
    public final TableField<OrdersRecord, Integer> CUSTOMERNUMBER = createField("customerNumber", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>classicmodels.orders</code> table reference
     */
    public Orders() {
        this("orders", null);
    }

    /**
     * Create an aliased <code>classicmodels.orders</code> table reference
     */
    public Orders(String alias) {
        this(alias, ORDERS);
    }

    private Orders(String alias, Table<OrdersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Orders(String alias, Table<OrdersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Classicmodels.CLASSICMODELS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OrdersRecord> getPrimaryKey() {
        return Keys.KEY_ORDERS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OrdersRecord>> getKeys() {
        return Arrays.<UniqueKey<OrdersRecord>>asList(Keys.KEY_ORDERS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<OrdersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrdersRecord, ?>>asList(Keys.ORDERS_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Orders as(String alias) {
        return new Orders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(String name) {
        return new Orders(name, null);
    }
}

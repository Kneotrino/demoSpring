/*
 * This file is generated by jOOQ.
*/
package com.example.demo.model.tables;


import com.example.demo.model.Classicmodels;
import com.example.demo.model.Keys;
import com.example.demo.model.tables.records.OfficesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Offices extends TableImpl<OfficesRecord> {

    private static final long serialVersionUID = -91205626;

    /**
     * The reference instance of <code>classicmodels.offices</code>
     */
    public static final Offices OFFICES = new Offices();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OfficesRecord> getRecordType() {
        return OfficesRecord.class;
    }

    /**
     * The column <code>classicmodels.offices.officeCode</code>.
     */
    public final TableField<OfficesRecord, String> OFFICECODE = createField("officeCode", org.jooq.impl.SQLDataType.VARCHAR.length(10).nullable(false), this, "");

    /**
     * The column <code>classicmodels.offices.city</code>.
     */
    public final TableField<OfficesRecord, String> CITY = createField("city", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>classicmodels.offices.phone</code>.
     */
    public final TableField<OfficesRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>classicmodels.offices.addressLine1</code>.
     */
    public final TableField<OfficesRecord, String> ADDRESSLINE1 = createField("addressLine1", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>classicmodels.offices.addressLine2</code>.
     */
    public final TableField<OfficesRecord, String> ADDRESSLINE2 = createField("addressLine2", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * The column <code>classicmodels.offices.state</code>.
     */
    public final TableField<OfficesRecord, String> STATE = createField("state", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * The column <code>classicmodels.offices.country</code>.
     */
    public final TableField<OfficesRecord, String> COUNTRY = createField("country", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>classicmodels.offices.postalCode</code>.
     */
    public final TableField<OfficesRecord, String> POSTALCODE = createField("postalCode", org.jooq.impl.SQLDataType.VARCHAR.length(15).nullable(false), this, "");

    /**
     * The column <code>classicmodels.offices.territory</code>.
     */
    public final TableField<OfficesRecord, String> TERRITORY = createField("territory", org.jooq.impl.SQLDataType.VARCHAR.length(10).nullable(false), this, "");

    /**
     * Create a <code>classicmodels.offices</code> table reference
     */
    public Offices() {
        this("offices", null);
    }

    /**
     * Create an aliased <code>classicmodels.offices</code> table reference
     */
    public Offices(String alias) {
        this(alias, OFFICES);
    }

    private Offices(String alias, Table<OfficesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Offices(String alias, Table<OfficesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Classicmodels.CLASSICMODELS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OfficesRecord> getPrimaryKey() {
        return Keys.KEY_OFFICES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OfficesRecord>> getKeys() {
        return Arrays.<UniqueKey<OfficesRecord>>asList(Keys.KEY_OFFICES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Offices as(String alias) {
        return new Offices(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Offices rename(String name) {
        return new Offices(name, null);
    }
}

/*
 * This file is generated by jOOQ.
*/
package com.example.demo.model.tables;


import com.example.demo.model.Classicmodels;
import com.example.demo.model.Keys;
import com.example.demo.model.tables.records.ProductsRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Products extends TableImpl<ProductsRecord> {

    private static final long serialVersionUID = -265945555;

    /**
     * The reference instance of <code>classicmodels.products</code>
     */
    public static final Products PRODUCTS = new Products();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductsRecord> getRecordType() {
        return ProductsRecord.class;
    }

    /**
     * The column <code>classicmodels.products.productCode</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCTCODE = createField("productCode", org.jooq.impl.SQLDataType.VARCHAR.length(15).nullable(false), this, "");

    /**
     * The column <code>classicmodels.products.productName</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCTNAME = createField("productName", org.jooq.impl.SQLDataType.VARCHAR.length(70).nullable(false), this, "");

    /**
     * The column <code>classicmodels.products.productLine</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCTLINE = createField("productLine", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>classicmodels.products.productScale</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCTSCALE = createField("productScale", org.jooq.impl.SQLDataType.VARCHAR.length(10).nullable(false), this, "");

    /**
     * The column <code>classicmodels.products.productVendor</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCTVENDOR = createField("productVendor", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>classicmodels.products.productDescription</code>.
     */
    public final TableField<ProductsRecord, String> PRODUCTDESCRIPTION = createField("productDescription", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>classicmodels.products.quantityInStock</code>.
     */
    public final TableField<ProductsRecord, Short> QUANTITYINSTOCK = createField("quantityInStock", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>classicmodels.products.buyPrice</code>.
     */
    public final TableField<ProductsRecord, BigDecimal> BUYPRICE = createField("buyPrice", org.jooq.impl.SQLDataType.DECIMAL.precision(10, 2).nullable(false), this, "");

    /**
     * The column <code>classicmodels.products.MSRP</code>.
     */
    public final TableField<ProductsRecord, BigDecimal> MSRP = createField("MSRP", org.jooq.impl.SQLDataType.DECIMAL.precision(10, 2).nullable(false), this, "");

    /**
     * Create a <code>classicmodels.products</code> table reference
     */
    public Products() {
        this("products", null);
    }

    /**
     * Create an aliased <code>classicmodels.products</code> table reference
     */
    public Products(String alias) {
        this(alias, PRODUCTS);
    }

    private Products(String alias, Table<ProductsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Products(String alias, Table<ProductsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Classicmodels.CLASSICMODELS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProductsRecord> getPrimaryKey() {
        return Keys.KEY_PRODUCTS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProductsRecord>> getKeys() {
        return Arrays.<UniqueKey<ProductsRecord>>asList(Keys.KEY_PRODUCTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ProductsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProductsRecord, ?>>asList(Keys.PRODUCTS_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Products as(String alias) {
        return new Products(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(String name) {
        return new Products(name, null);
    }
}
